---
- name: add deploy key
  template:
    src: templates/deploy_key.j2
    dest: "$HOME/.deploy_key"
    owner: "{{ appname }}"
    group: "{{ appname }}"
    mode: 0400
- name: clone app
  git:
    accept_hostkey: yes
    dest: "$HOME/{{ appname }}"
    repo: "{{ app_repo_link }}"
    version: master
    key_file: "$HOME/.deploy_key"
- name: install app requirement packages
  pip:
    requirements: "$HOME/{{ appname }}/requirements.txt"
    virtualenv: "$HOME/{{ appname }}/env"
    virtualenv_python: "python3.8"
- name: install app requirement packages
  pip:
    name: "$HOME/{{ appname }}"
    editable: "yes"
    virtualenv: "$HOME/{{ appname }}/env"
    virtualenv_python: "python3.8"
- name: link files to /opt
  file:
    force: yes
    state: link
    path: "{{ item.dest }}"
    src: "{{ item.src}}"
    owner: "{{ appname }}"
    group: "{{ appname }}"
  with_items:
    - {"src": "/home/{{ appname }}/{{ appname }}",
       "dest": "/opt/{{ appname }}"}
  become: true
  become_user: root
  become_method: sudo
- name: add private key file
  template:
    src: templates/private_key.j2
    dest: "$HOME/.private_key"
    owner: "{{ appname }}"
    group: "{{ appname }}"
    mode: 0400
- name: import private gpg key
  command:
    cmd: gpg2  --pinentry-mode=loopback --passphrase {{ private_gpg_key_pass }} --import $HOME/.private_key
- name: decrypt envrc file
  command:
    cmd: git-secret reveal -p {{ private_gpg_key_pass }}
    chdir: "/opt/{{ appname }}"
  environment:
    SECRETS_GPG_COMMAND: gpg2
